<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 星空海绵 - 星空浩瀚 | 海绵吸水</title>
    <link>https://xkhm.net/tags/javascript/</link>
    <description>Recent content in JavaScript on 星空海绵 - 星空浩瀚 | 海绵吸水</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>星空海绵</copyright>
    <lastBuildDate>Thu, 07 Jan 2021 21:50:29 +0800</lastBuildDate><atom:link href="https://xkhm.net/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手写Promise</title>
      <link>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Thu, 07 Jan 2021 21:50:29 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%89%8B%E5%86%99promise/</guid>
      <description>文章类型：个人学习笔记 手写 Promise 的前提是了解 Promise/A+ 规范，不说倒背如流，但是基本的点还是需要掌握的。 1.Promise/A+规范 原文地址：Promis</description>
    </item>
    
    <item>
      <title>JavaScript异步编程</title>
      <link>https://xkhm.net/post/javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 04 Jan 2021 22:56:54 +0800</pubDate>
      
      <guid>https://xkhm.net/post/javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid>
      <description>1.什么是异步？ (1)异步的作用 在前端编程中（甚至后端有时也是这样），我们在处理一些简短、快速的操作时，例如计算 1 + 1 的结果，往往在主线程中</description>
    </item>
    
    <item>
      <title>Vue2从入门到CV</title>
      <link>https://xkhm.net/post/vue2%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0cv/</link>
      <pubDate>Mon, 04 Jan 2021 19:44:36 +0800</pubDate>
      
      <guid>https://xkhm.net/post/vue2%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0cv/</guid>
      <description>前言：学习笔记，CV即指CV Vue的官方文档，也指 CV 网上的Vue业务代码😎😎 1.Vue是什么？ Vue (读音 /vjuː/，类似于 view) 是一套用于构建用</description>
    </item>
    
    <item>
      <title>JS面试题复习</title>
      <link>https://xkhm.net/post/js%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Mon, 04 Jan 2021 08:30:30 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%8D%E4%B9%A0/</guid>
      <description>1.对象 （1）深浅拷贝 只会拷贝对象的第一层 1.浅拷贝（4种） （1）直接赋值 let obj = { name: &amp;#39;XKHM&amp;#39;, age: 25, job: &amp;#39;Software Engineer&amp;#39; } let obj1 = obj; console.log(obj1 === obj); （2）Object.assi</description>
    </item>
    
    <item>
      <title>JS之日常解题</title>
      <link>https://xkhm.net/post/js%E4%B9%8B%E6%97%A5%E5%B8%B8%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Thu, 31 Dec 2020 22:06:11 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E4%B9%8B%E6%97%A5%E5%B8%B8%E8%A7%A3%E9%A2%98/</guid>
      <description>前言：好记性不如烂笔头，知识来自于点点滴滴的记录 1.取出对象中一部分放到另一个对象中 今天下午在掘金摸鱼的时候，看见有一个小同学发了一个沸点 嗯</description>
    </item>
    
    <item>
      <title>JS基础之Promise</title>
      <link>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8Bpromise/</link>
      <pubDate>Sat, 26 Dec 2020 16:05:58 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8Bpromise/</guid>
      <description>前言：个人学习笔记，初识Promise 1.Promise解决了什么问题？ 用来解决 回调地狱 问题 回调地狱：在JS中，为了实现某些逻辑经常会写出层</description>
    </item>
    
    <item>
      <title>JS基础之手写bind</title>
      <link>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%89%8B%E5%86%99bind/</link>
      <pubDate>Fri, 25 Dec 2020 08:24:35 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%89%8B%E5%86%99bind/</guid>
      <description>文章类型：学习笔记 1.bind()的使用 😏😏😏😏😏 let obj = { age: 18 } function getInfo(name, job) { console.log(name); console.log(job); console.log(this.age); } getInfo.bind(obj, &#39;星空海绵&#39;)(&#39;Software Engineer&#39;); bind在第一个参数之</description>
    </item>
    
    <item>
      <title>js基础</title>
      <link>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 20 Dec 2020 23:48:22 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80/</guid>
      <description>1.JS中的变量 （1）变量提升和函数提升 变量提升和函数提升的过程： 创建阶段：JS解释器会找出需要提升的变量和函数，并给他们在内存中开辟好空间</description>
    </item>
    
    <item>
      <title>JS基础之深浅拷贝</title>
      <link>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Sat, 19 Dec 2020 12:23:51 +0800</pubDate>
      
      <guid>https://xkhm.net/post/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>文章类型：个人学习笔记 前言 友情提醒：个人学习笔记，可能有写的不对的地方，还请大佬们发现了提醒一下小弟我。 1.浅拷贝 定义：一个对象直接拷贝已存</description>
    </item>
    
    <item>
      <title>一文详解JavaScript中的数组</title>
      <link>https://xkhm.net/post/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3javascript%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 19 Dec 2020 12:23:51 +0800</pubDate>
      
      <guid>https://xkhm.net/post/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3javascript%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</guid>
      <description>前言 最近在重学JS基础，然后正好学到数组这，前期是通过看视频学习的，后来发现通过看视频学习进度实在是太慢了，所以又开始看书看文档学，然后就开</description>
    </item>
    
  </channel>
</rss>
